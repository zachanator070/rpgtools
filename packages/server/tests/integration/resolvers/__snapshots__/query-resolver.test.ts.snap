// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query resolver with world no current user 1`] = `
{
  "data": {
    "currentUser": {
      "_id": Any<String>,
      "currentWorld": null,
      "email": null,
      "roles": [],
      "username": "Anonymous",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world users 1`] = `
{
  "data": {
    "users": {
      "docs": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
        },
      ],
      "page": 1,
      "totalPages": 1,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world wiki no permission 1`] = `
{
  "data": {
    "wiki": null,
  },
  "errors": ArrayContaining [
    ObjectContaining {
      "message": Any<String>,
    },
  ],
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user current user 1`] = `
{
  "data": {
    "currentUser": {
      "_id": Any<String>,
      "currentWorld": null,
      "email": "tester@gmail.com",
      "roles": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
        },
      ],
      "username": "tester",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user get roles 1`] = `
{
  "data": {
    "roles": {
      "docs": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
          "accessControlList": Any<Array>,
          "members": Any<Array>,
          "world": {
            "_id": Any<String>,
          },
        },
      ],
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user get roles permission denied 1`] = `
{
  "data": null,
  "errors": [
    [GraphQLError: You do not have permission to read this World],
  ],
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user wiki 1`] = `
{
  "data": {
    "wiki": {
      "_id": Any<String>,
      "accessControlList": [],
      "canAdmin": true,
      "canWrite": true,
      "content": null,
      "coverImage": null,
      "folder": {
        "_id": Any<String>,
      },
      "mapImage": ObjectContaining {
        "_id": Any<String>,
        "chunks": ArrayContaining [
          {
            "_id": Any<String>,
            "fileId": Any<String>,
          },
        ],
        "height": Any<Number>,
        "icon": {
          "_id": Any<String>,
          "chunks": [
            {
              "_id": Any<String>,
              "fileId": Any<String>,
            },
          ],
        },
        "width": Any<Number>,
      },
      "name": "Earth",
      "pixelsPerFoot": 50,
      "type": "Place",
      "world": {
        "_id": Any<String>,
      },
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user wikis in folder 1`] = `
{
  "data": {
    "wikisInFolder": {
      "docs": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
        },
      ],
      "nextPage": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user world 1`] = `
{
  "data": {
    "world": {
      "_id": Any<String>,
      "accessControlList": ArrayContaining [
        ObjectContaining {
          "permission": Any<String>,
          "principal": ObjectContaining {
            "_id": Any<String>,
            "name": Any<String>,
          },
          "principalType": Any<String>,
        },
      ],
      "canAddModels": true,
      "canAddRoles": true,
      "canAdmin": true,
      "canHostGame": true,
      "canWrite": true,
      "name": "Earth",
      "rootFolder": {
        "_id": Any<String>,
        "accessControlList": [],
        "canAdmin": true,
        "canWrite": true,
        "children": ArrayContaining [
          ObjectContaining {
            "_id": Any<String>,
          },
        ],
        "name": "Earth",
      },
      "wikiPage": {
        "_id": Any<String>,
        "mapImage": ObjectContaining {
          "_id": Any<String>,
          "chunkHeight": Any<Number>,
          "chunkWidth": Any<Number>,
        },
        "name": "Earth",
      },
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world with authenticated user worlds with one private and one public world 1`] = `
{
  "data": {
    "worlds": {
      "docs": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
          "wikiPage": ObjectContaining {
            "_id": Any<String>,
          },
        },
      ],
      "totalPages": 1,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world world 1`] = `
{
  "data": {
    "world": null,
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;

exports[`query resolver with world worlds with one private and one public world 1`] = `
{
  "data": {
    "worlds": {
      "docs": ArrayContaining [
        ObjectContaining {
          "_id": Any<String>,
          "wikiPage": ObjectContaining {
            "_id": Any<String>,
          },
        },
      ],
      "totalPages": 1,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": {
    "headers": Headers {
      Symbol(map): {},
    },
  },
}
`;
